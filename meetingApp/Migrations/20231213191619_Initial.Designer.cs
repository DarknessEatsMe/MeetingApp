// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using meetingApp;

#nullable disable

namespace meetingApp.Migrations
{
    [DbContext(typeof(MeetingAppContext))]
    [Migration("20231213191619_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("meetingApp.Models.Adress", b =>
                {
                    b.Property<int>("IdAdress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_adress");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdAdress"));

                    b.Property<int>("IdCity")
                        .HasColumnType("integer")
                        .HasColumnName("id_city");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.HasKey("IdAdress")
                        .HasName("adresses_pkey");

                    b.HasIndex("IdCity");

                    b.HasIndex(new[] { "IdUser" }, "unique_user_adr")
                        .IsUnique();

                    b.ToTable("adresses", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("chat_name");

                    b.Property<int>("IdMatch")
                        .HasColumnType("integer")
                        .HasColumnName("id_match");

                    b.HasKey("ChatId")
                        .HasName("chats_pkey");

                    b.HasIndex("IdMatch");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_city");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdCity"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("IdCity")
                        .HasName("cities_pkey");

                    b.HasIndex(new[] { "Name" }, "unique_city_name")
                        .IsUnique();

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.Description", b =>
                {
                    b.Property<int>("DescrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("descr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("DescrId"));

                    b.Property<string>("Decsr")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("decsr");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.HasKey("DescrId")
                        .HasName("descriptions_pkey");

                    b.HasIndex(new[] { "IdUser" }, "unique_user_descr")
                        .IsUnique();

                    b.ToTable("descriptions", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.Login", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<string>("Login1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role")
                        .HasDefaultValueSql("'user'::character varying");

                    b.HasKey("IdUser")
                        .HasName("logins_pkey");

                    b.ToTable("logins", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.Match", b =>
                {
                    b.Property<int>("IdMatch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_match");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdMatch"));

                    b.Property<int>("IdUser1")
                        .HasColumnType("integer")
                        .HasColumnName("id_user1");

                    b.Property<int>("IdUser2")
                        .HasColumnType("integer")
                        .HasColumnName("id_user2");

                    b.Property<int>("StatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("stat_id")
                        .HasDefaultValueSql("2");

                    b.HasKey("IdMatch")
                        .HasName("matches_pkey");

                    b.HasIndex("IdUser1");

                    b.HasIndex("IdUser2");

                    b.HasIndex("StatId");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.Message", b =>
                {
                    b.Property<int>("MsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("msg_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("MsgId"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<string>("Msg")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("msg");

                    b.Property<DateTime>("MsgDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("msg_date");

                    b.HasKey("MsgId")
                        .HasName("messages_pkey");

                    b.HasIndex("ChatId");

                    b.HasIndex("IdUser");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("photo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PhotoId"));

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<string>("PhotoAdr")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)")
                        .HasColumnName("photo_adr");

                    b.HasKey("PhotoId")
                        .HasName("photos_pkey");

                    b.HasIndex(new[] { "IdUser" }, "unique_user_photo")
                        .IsUnique();

                    b.ToTable("photos", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.Status", b =>
                {
                    b.Property<int>("StatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("stat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("StatId"));

                    b.Property<string>("Status1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("status");

                    b.HasKey("StatId")
                        .HasName("statuses_pkey");

                    b.HasIndex(new[] { "Status1" }, "statuses_status_key")
                        .IsUnique();

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdUser"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FatherName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("father_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character(12)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sec_name");

                    b.Property<char?>("Sex")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("sex");

                    b.HasKey("IdUser")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("meetingApp.Models.Adress", b =>
                {
                    b.HasOne("meetingApp.Models.City", "IdCityNavigation")
                        .WithMany("Adresses")
                        .HasForeignKey("IdCity")
                        .IsRequired()
                        .HasConstraintName("adresses_id_city_fkey");

                    b.HasOne("meetingApp.Models.User", "IdUserNavigation")
                        .WithOne("Adress")
                        .HasForeignKey("meetingApp.Models.Adress", "IdUser")
                        .IsRequired()
                        .HasConstraintName("adresses_id_user_fkey");

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("meetingApp.Models.Chat", b =>
                {
                    b.HasOne("meetingApp.Models.Match", "IdMatchNavigation")
                        .WithMany("Chats")
                        .HasForeignKey("IdMatch")
                        .IsRequired()
                        .HasConstraintName("chats_id_match_fkey");

                    b.Navigation("IdMatchNavigation");
                });

            modelBuilder.Entity("meetingApp.Models.Description", b =>
                {
                    b.HasOne("meetingApp.Models.User", "IdUserNavigation")
                        .WithOne("Description")
                        .HasForeignKey("meetingApp.Models.Description", "IdUser")
                        .IsRequired()
                        .HasConstraintName("descriptions_id_user_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("meetingApp.Models.Login", b =>
                {
                    b.HasOne("meetingApp.Models.User", "IdUserNavigation")
                        .WithOne("Login")
                        .HasForeignKey("meetingApp.Models.Login", "IdUser")
                        .IsRequired()
                        .HasConstraintName("user_log_fk");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("meetingApp.Models.Match", b =>
                {
                    b.HasOne("meetingApp.Models.User", "IdUser1Navigation")
                        .WithMany("MatchIdUser1Navigations")
                        .HasForeignKey("IdUser1")
                        .IsRequired()
                        .HasConstraintName("matches_id_user1_fkey");

                    b.HasOne("meetingApp.Models.User", "IdUser2Navigation")
                        .WithMany("MatchIdUser2Navigations")
                        .HasForeignKey("IdUser2")
                        .IsRequired()
                        .HasConstraintName("matches_id_user2_fkey");

                    b.HasOne("meetingApp.Models.Status", "Stat")
                        .WithMany("Matches")
                        .HasForeignKey("StatId")
                        .IsRequired()
                        .HasConstraintName("matches_stat_id_fkey");

                    b.Navigation("IdUser1Navigation");

                    b.Navigation("IdUser2Navigation");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("meetingApp.Models.Message", b =>
                {
                    b.HasOne("meetingApp.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("messages_chat_id_fkey");

                    b.HasOne("meetingApp.Models.User", "IdUserNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("messages_id_user_fkey");

                    b.Navigation("Chat");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("meetingApp.Models.Photo", b =>
                {
                    b.HasOne("meetingApp.Models.User", "IdUserNavigation")
                        .WithOne("Photo")
                        .HasForeignKey("meetingApp.Models.Photo", "IdUser")
                        .IsRequired()
                        .HasConstraintName("photos_id_user_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("meetingApp.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("meetingApp.Models.City", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("meetingApp.Models.Match", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("meetingApp.Models.Status", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("meetingApp.Models.User", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("Description");

                    b.Navigation("Login");

                    b.Navigation("MatchIdUser1Navigations");

                    b.Navigation("MatchIdUser2Navigations");

                    b.Navigation("Messages");

                    b.Navigation("Photo");
                });
#pragma warning restore 612, 618
        }
    }
}
